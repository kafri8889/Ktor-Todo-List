openapi: 3.0.3
info:
  title: Ktor Todo List API
  description: Dokumentasi Ktor-Todo
  contact:
    name: Twitter
    url: https://twitter.com/anafthdev_
  version: 0.0.1
servers:
  - url: http://0.0.0.0:80/
  - url: http://127.0.0.1/
tags:
  - name: User
    description: Pengguna
  - name: Category
    description: Kategori
  - name: Todo
    description: Todo
  - name: Sub Todo
    description: Sub Todo
paths:
  /user:
    post:
      tags:
        - User
      summary: Create new user
      operationId: insertUser
      requestBody:
        description: Create new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User Request Body'
        required: true
      responses:
        '200':
          description: User successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User created
                  data:
                    $ref: '#/components/schemas/User Request Body'

        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/{id}:
    put:
      tags:
        - User
      summary: Update an existing User
      description: Update an existing User by Id
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        description: Update an User
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User Request Body'
        required: true
      responses:
        '200':
          description: Return updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User updated
                  data:
                    $ref: '#/components/schemas/User Request Body'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - User
      summary: Get user by id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          required: true
        - name: include
          in: query
          description: if true, return User with "categories" and "todo"
          schema:
            type: boolean
            nullable: false
            default: false
      responses:
        '200':
          description: Return user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User found
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - User
      summary: Delete user by id
      operationId: deleteUserById
      parameters:
        - name: id
          in: path
      responses:
        '200':
          description: Return deleted user
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User deleted
                  data:
                    $ref: '#/components/schemas/User Request Body'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /category:
    post:
      tags:
        - Category
      summary: Create new category
      operationId: insertCategory
      requestBody:
        description: Create new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Category successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Category created
                  data:
                    $ref: '#/components/schemas/Category'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Category
      summary: Get category by user id
      operationId: getCategoryByUserId
      parameters:
        - name: userId
          required: true
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Return category list
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User deleted
                  data:
                    $ref: '#/components/schemas/Categories'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /category/{id}:
    get:
      tags:
        - Category
      summary: Get category by id
      operationId: getCategoryById
      parameters:
        - name: id
          in: path
          required: true
      responses:
        '200':
          description: Return category
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User deleted
                  data:
                    $ref: '#/components/schemas/Category'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Category
      summary: Update an existing Category
      description: Update an existing Category by Id
      operationId: updateCategory
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        description: Update an Category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        '200':
          description: Return updated Category
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Category updated
                  data:
                    $ref: '#/components/schemas/Category'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Category
      summary: Delete Category by id
      operationId: deleteCategoryById
      parameters:
        - name: id
          in: path
          required: true
      responses:
        '200':
          description: Return deleted Category
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Category deleted
                  data:
                    $ref: '#/components/schemas/Category'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /todo:
    post:
      tags:
        - Todo
      summary: Create new todo
      operationId: insertTodo
      requestBody:
        description: Create new todo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo Request Body'
        required: true
      responses:
        '200':
          description: Todo successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Category deleted
                  data:
                    $ref: '#/components/schemas/Todo'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Todo
      summary: Get todo by user id or category id
      description: '
      Use either "userId" or "categoryId". 

      Category first. 

      If both params are null, it will return a Bad Request error. 
      '
      operationId: getTodoByUserIdOrCategoryId
      parameters:
        - name: categoryId
          in: query
          schema:
            nullable: true
            type: integer
            format: int32
        - name: userId
          in: query
          schema:
            nullable: true
            type: integer
            format: int32
      responses:
        '200':
          description: Return todo list
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Todo found
                  data:
                    $ref: '#/components/schemas/Categories'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /todo/{id}:
    get:
      tags:
        - Todo
      summary: Get todo by id
      operationId: getTodoById
      parameters:
        - name: id
          in: path
          required: true
      responses:
        '200':
          description: Return todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: User deleted
                  data:
                    $ref: '#/components/schemas/Todo Request Body'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Todo
      summary: Update an existing Todo
      description: Update an existing Todo by Id
      operationId: updateTodo
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        description: Update an Todo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Todo Request Body'
        required: true
      responses:
        '200':
          description: Return updated Todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Todo updated
                  data:
                    $ref: '#/components/schemas/Todo Request Body'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Todo
      summary: Delete Todo by id
      operationId: deleteTodoById
      parameters:
        - name: id
          in: path
          required: true
      responses:
        '200':
          description: Return deleted Todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Todo deleted
                  data:
                    $ref: '#/components/schemas/Todo Request Body'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subTodo:
    post:
      tags:
        - Sub Todo
      summary: Create new sub todo
      operationId: insertSub Todo
      requestBody:
        description: Create new subTodo
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sub Todo'
        required: true
      responses:
        '200':
          description: Sub Todo successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Sub Todo created
                  data:
                    $ref: '#/components/schemas/Sub Todo'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Sub Todo
      summary: Get sub todo by todo id
      operationId: getSubTodoByTodoId
      parameters:
        - name: todoId
          required: true
          in: query
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Return sub todo list
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Sub todo found
                  data:
                    $ref: '#/components/schemas/SubTodoList'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sub Todo is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /subTodo/{id}:
    get:
      tags:
        - Sub Todo
      summary: Get sub todo by id
      operationId: getSubTodoById
      parameters:
        - name: id
          in: path
          required: true
      responses:
        '200':
          description: Return sub todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Sub todo found
                  data:
                    $ref: '#/components/schemas/Sub Todo'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sub Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Sub Todo
      summary: Update an existing Sub Todo
      description: Update an existing Sub Todo by Id
      operationId: updateSub Todo
      parameters:
        - name: id
          in: path
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sub Todo'
        required: true
      responses:
        '200':
          description: Return updated Sub Todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Sub Todo updated
                  data:
                    $ref: '#/components/schemas/Sub Todo'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sub Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Sub Todo
      summary: Delete Sub Todo by id
      operationId: deleteSub TodoById
      parameters:
        - name: id
          in: path
          required: true
      responses:
        '200':
          description: Return deleted Sub Todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    format: int32
                    example: 200
                  message:
                    type: string
                    example: Sub Todo deleted
                  data:
                    $ref: '#/components/schemas/Sub Todo'
        '400':
          description: Bad request Param or query not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sub Todo not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
          description: Http status code
        message:
          type: string
          example: User not found
          description: Error message
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        userId:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Dogs
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Lee Seo
        email:
          type: string
          example: leeseo@gmail.com
        password:
          type: string
          example: 'LEEseo@1'
        categories:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Category'
        todo:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Todo'
    Todo:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        categoryId:
          type: integer
          format: int32
          example: 1
        userId:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: Tugas 1
        description:
          type: string
          example: Deskripsi tugas
        createdAt:
          type: integer
          format: int64
          example: 1690779605000
        finished:
          type: boolean
          example: false
        subTodo:
          nullable: true
          type: array
          items:
            $ref: '#/components/schemas/Sub Todo'
    Sub Todo:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        todoId:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: Tugas 1
        createdAt:
          type: integer
          format: int64
          example: 1690779605000
        finished:
          type: boolean
          example: false
    User Request Body:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: Lee Seo
        email:
          type: string
          example: leeseo@gmail.com
        password:
          type: string
          example: 'LEEseo@1'
    Todo Request Body:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        categoryId:
          type: integer
          format: int32
          example: 1
        userId:
          type: integer
          format: int32
          example: 1
        title:
          type: string
          example: Tugas 1
        description:
          type: string
          example: Deskripsi tugas
        createdAt:
          type: integer
          format: int64
          example: 1690779605000
        finished:
          type: boolean
          example: false
    Categories:
      type: array
      items:
        $ref: '#/components/schemas/Category'
    TodoList:
      type: array
      items:
        $ref: '#/components/schemas/Todo'
    SubTodoList:
      type: array
      items:
        $ref: '#/components/schemas/Sub Todo'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header